#!/usr/bin/env bash
# Wires OpenLiteSpeed for ASP.NET Core behind CyberPanel:
#  - extprocessor -> 127.0.0.1:<port>
#  - proxy context /
#  - proxy context /ConnectionHub (SignalR)
#  - WebSocket upgrade rewrite (single block)
#  - enableWebSocket 1 on :443 listeners
# Safe: backs up, validates, auto-restores on error.
set -euo pipefail

DOMAIN="${1:-}"; PORT="${2:-}"
[[ -n "$DOMAIN" && -n "$PORT" ]] || { echo "Usage: $0 <domain> <port>"; exit 1; }

LSWS_ROOT="${LSWS_ROOT:-/usr/local/lsws}"
HTTPD_CONF="$LSWS_ROOT/conf/httpd_config.conf"

fail(){ echo "[ERROR] $*" >&2; exit 1; }

require(){ command -v "$1" >/dev/null 2>&1 || fail "missing: $1"; }
require awk
require sed
require grep

# ---------- locate vhost file ----------
pick_vhconf() {
  local base="$LSWS_ROOT/conf/vhosts" picked=""
  [[ -d "$base" ]] || return 1
  # exact dir + prefix matches (domain-443 / domain_SSL etc.)
  local cand=()
  [[ -d "$base/$DOMAIN" ]] && cand+=("$base/$DOMAIN")
  while IFS= read -r -d '' d; do cand+=("$d"); done \
    < <(find "$base" -maxdepth 1 -type d -name "${DOMAIN}*" -print0 2>/dev/null || true)
  # first pass
  for d in "${cand[@]}"; do
    [[ -f "$d/vhconf.conf" ]] && { picked="$d/vhconf.conf"; break; }
    [[ -f "$d/vhost.conf"  ]] && { picked="$d/vhost.conf";  break; }
  done
  # prefer SSL-ish names if not picked
  if [[ -z "$picked" && ${#cand[@]} -gt 0 ]]; then
    for d in "${cand[@]}"; do
      [[ "$d" =~ 443|SSL|ssl ]] || continue
      [[ -f "$d/vhconf.conf" ]] && { picked="$d/vhconf.conf"; break; }
      [[ -f "$d/vhost.conf"  ]] && { picked="$d/vhost.conf";  break; }
    done
  fi
  [[ -n "$picked" ]] && echo "$picked" || return 1
}
VHCONF="$(pick_vhconf || true)"
[[ -n "$VHCONF" ]] || fail "vhost config not found for $DOMAIN under $LSWS_ROOT/conf/vhosts"
echo "[i] Using vhost config: $VHCONF"

# ---------- backups ----------
BK_VHOST="$VHCONF.bak.$(date +%s)"
cp -a "$VHCONF" "$BK_VHOST"

BK_HTTPD=""
if [[ -f "$HTTPD_CONF" ]]; then
  BK_HTTPD="$HTTPD_CONF.bak.$(date +%s)"
  cp -a "$HTTPD_CONF" "$BK_HTTPD"
fi

EXT="dotnet_$(echo "$DOMAIN" | tr -cd '[:alnum:]_')"

# ---------- clean previous auto blocks to avoid dup braces ----------
sed -i '/# BEGIN: auto-dotnet-extprocessor /,/# END: auto-dotnet-extprocessor /d' "$VHCONF"
sed -i '/# BEGIN: auto-dotnet-context-/,/# END: auto-dotnet-context-/d' "$VHCONF"
sed -i '/# BEGIN: auto-dotnet-websocket/,/# END: auto-dotnet-websocket/d' "$VHCONF"
sed -i '/# BEGIN: auto-dotnet-websocket-strong/,/# END: auto-dotnet-websocket-strong/d' "$VHCONF"

# ---------- build clean blocks ----------
read -r -d '' EXT_BLOCK <<EOT || true
# BEGIN: auto-dotnet-extprocessor $EXT
extprocessor $EXT {
  type                    proxy
  address                 127.0.0.1:$PORT
  maxConns                100
  initTimeout             60
  retryTimeout            0
  pcKeepAliveTimeout      120
}
# END: auto-dotnet-extprocessor $EXT
EOT

read -r -d '' CTX_ROOT <<EOT || true
# BEGIN: auto-dotnet-context-$EXT
context / {
  type                    proxy
  handler                 $EXT
  addDefaultCharset       off
}
# END: auto-dotnet-context-$EXT
EOT

read -r -d '' CTX_HUB <<EOT || true
# BEGIN: auto-dotnet-context-ConnectionHub-$EXT
context /ConnectionHub {
  type                    proxy
  handler                 $EXT
  addDefaultCharset       off
}
# END: auto-dotnet-context-ConnectionHub-$EXT
EOT

read -r -d '' RWT_BLOCK <<EOT || true
# BEGIN: auto-dotnet-websocket
rewrite  {
  enable                  1
  rewriteCond             %{HTTP:Connection} upgrade [NC]
  rewriteCond             %{HTTP:Upgrade} websocket [NC]
  rewriteRule             /(.*) ws://127.0.0.1:$PORT/\$1 [P,L]
}
# END: auto-dotnet-websocket
EOT

# ---------- insert blocks just BEFORE the final closing brace ----------
awk -v extblk="$EXT_BLOCK" -v ctxroot="$CTX_ROOT" -v ctxhub="$CTX_HUB" -v rwt="$RWT_BLOCK" '
  BEGIN{lastClose=0}
  {buf[NR]=$0; if($0 ~ /^\s*}\s*$/) lastClose=NR}
  END{
    if(lastClose==0){ for(i=1;i<=NR;i++) print buf[i]; exit 0 }
    for(i=1;i<lastClose;i++) print buf[i]
    print extblk
    print ctxroot
    print ctxhub
    print rwt
    for(i=lastClose;i<=NR;i++) print buf[i]
  }
' "$VHCONF" > "$VHCONF.tmp" && mv "$VHCONF.tmp" "$VHCONF"

# ---------- ensure WebSockets enabled on HTTPS listener(s) ----------
if [[ -f "$HTTPD_CONF" ]]; then
  awk '
    BEGIN{inL=0; d=0; isSSL=0; hasWS=0}
    /^[[:space:]]*listener[[:space:]]+/ {inL=1; d=0; isSSL=0; hasWS=0}
    {
      if(inL){
        if($0 ~ /\{/) d++
        if($0 ~ /\}/) d--
        if($0 ~ /address[[:space:]]*.*:443/) isSSL=1
        if($0 ~ /secure[[:space:]]+1/) isSSL=1
        if($0 ~ /^[[:space:]]*enableWebSocket[[:space:]]+1/) hasWS=1
        if(d==0 && $0 ~ /\}/){
          if(isSSL && !hasWS) print "  enableWebSocket         1"
          inL=0
        }
      }
      print $0
    }
  ' "$HTTPD_CONF" > "$HTTPD_CONF.tmp" && mv "$HTTPD_CONF.tmp" "$HTTPD_CONF"
fi

# ---------- validate & restart; auto-restore on failure ----------
if [[ -x "$LSWS_ROOT/bin/openlitespeed" ]]; then
  if ! "$LSWS_ROOT/bin/openlitespeed" -t; then
    echo "[!] Validation failed. Restoring backups…"
    cp -a "$BK_VHOST" "$VHCONF"
    [[ -n "$BK_HTTPD" && -f "$BK_HTTPD" ]] && cp -a "$BK_HTTPD" "$HTTPD_CONF"
    fail "Config test failed."
  fi
fi

systemctl restart lsws || {
  echo "[!] Restart failed. Restoring backups…"
  cp -a "$BK_VHOST" "$VHCONF"
  [[ -n "$BK_HTTPD" && -f "$BK_HTTPD" ]] && cp -a "$BK_HTTPD" "$HTTPD_CONF"
  systemctl restart lsws || true
  fail "OpenLiteSpeed did not restart."
}

echo "[ok] OLS wired for $DOMAIN → 127.0.0.1:$PORT (via $VHCONF). WS enabled."
