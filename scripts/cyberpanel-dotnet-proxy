#!/usr/bin/env bash
# Usage: sudo cyberpanel-dotnet-proxy <domain> <port>
# Auto-detects vhost folder/file, creates/updates:
#   - extprocessor (proxy → 127.0.0.1:<port>)
#   - proxy context /
#   - WebSocket upgrade rule (SignalR)
set -euo pipefail

DOMAIN="${1:-}"; PORT="${2:-}"
[[ -n "$DOMAIN" && -n "$PORT" ]] || { echo "Usage: $0 <domain> <port>"; exit 1; }

LSWS_ROOT="${LSWS_ROOT:-/usr/local/lsws}"

# --- auto-detect vhost dir/file for this domain ---
# Try exact dir, then any prefix match (domain-443, domain_SSL, etc.), prefer SSL one if multiple.
pick_vhconf() {
  local candidates=()
  local base="$LSWS_ROOT/conf/vhosts"

  [[ -d "$base" ]] || return 1

  # exact match first
  [[ -d "$base/$DOMAIN" ]] && candidates+=("$base/$DOMAIN")

  # any dir starting with the domain
  while IFS= read -r -d '' d; do candidates+=("$d"); done < <(find "$base" -maxdepth 1 -type d -name "$DOMAIN*" -print0 2>/dev/null || true)

  # prefer SSL/443 variants when multiple exist
  local picked=""
  for d in "${candidates[@]}"; do
    [[ -f "$d/vhconf.conf" ]] && picked="$d/vhconf.conf" && break
    [[ -f "$d/vhost.conf" ]] && picked="$d/vhost.conf" && break
  done
  # second pass, bias SSL-ish names
  if [[ -z "$picked" && ${#candidates[@]} -gt 0 ]]; then
    for d in "${candidates[@]}"; do
      [[ "$d" =~ 443|SSL|ssl ]] && { [[ -f "$d/vhconf.conf" ]] && picked="$d/vhconf.conf"; [[ -z "$picked" && -f "$d/vhost.conf" ]] && picked="$d/vhost.conf"; [[ -n "$picked" ]] && break; }
    done
  fi

  [[ -n "$picked" ]] && echo "$picked" || return 1
}

VHCONF="$(pick_vhconf || true)"
[[ -n "$VHCONF" ]] || { echo "vhost config not found for $DOMAIN under $LSWS_ROOT/conf/vhosts"; exit 1; }

EXT="dotnet_${DOMAIN//[^a-zA-Z0-9]/_}"
sudo cp -a "$VHCONF" "$VHCONF.bak.$(date +%Y%m%d-%H%M%S)"

upsert() {
  local FILE="$1" BEGIN="$2" END="$3" CONTENT="$4"
  sudo awk -v b="$BEGIN" -v e="$END" -v c="$CONTENT" '
    BEGIN{in=0; f=0}
    $0 ~ b {print c; in=1; f=1; next}
    $0 ~ e {in=0; next}
    in==1 {next}
    {print}
    END{if(f==0) print c}
  ' "$FILE" > "${FILE}.tmp" && sudo mv "${FILE}.tmp" "$FILE"
}

# 1) extprocessor
EXT_BEGIN="# BEGIN: auto-dotnet-extprocessor $EXT"
EXT_END="# END: auto-dotnet-extprocessor $EXT"
read -r -d '' EXT_BLOCK <<EOF || true
$EXT_BEGIN
extprocessor $EXT {
  type                    proxy
  address                 127.0.0.1:$PORT
  maxConns                100
  initTimeout             60
  retryTimeout            0
  pcKeepAliveTimeout      120
}
$EXT_END
EOF
upsert "$VHCONF" "$EXT_BEGIN" "$EXT_END" "$EXT_BLOCK"

# 2) proxy context /
CTX_BEGIN="# BEGIN: auto-dotnet-context-$EXT"
CTX_END="# END: auto-dotnet-context-$EXT"
read -r -d '' CTX_BLOCK <<EOF || true
$CTX_BEGIN
context / {
  type                    proxy
  handler                 $EXT
  addDefaultCharset       off
}
$CTX_END
EOF
upsert "$VHCONF" "$CTX_BEGIN" "$CTX_END" "$CTX_BLOCK"

# 3) WebSocket upgrade (SignalR)
RWT_BEGIN="# BEGIN: auto-dotnet-websocket-$EXT"
RWT_END="# END: auto-dotnet-websocket-$EXT"
read -r -d '' RWT_BLOCK <<EOF || true
$RWT_BEGIN
rewrite  {
  enable                  1
  rewriteCond             %{HTTP:Upgrade} =websocket [NC]
  rewriteRule             /(.*) ws://127.0.0.1:$PORT/\$1 [P,L]
}
$RWT_END
EOF
upsert "$VHCONF" "$RWT_BEGIN" "$RWT_END" "$RWT_BLOCK"

sudo systemctl restart lsws
echo "OK: OLS wired for $DOMAIN → 127.0.0.1:$PORT via $VHCONF"
